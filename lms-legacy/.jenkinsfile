pipeline {
    agent any

    triggers {
        githubPush()
    }

    tools {
        maven 'Maven 3.9.9'
        jdk 'JDK 17'
    }

    environment {
        PROJECT_DIR = "lms-legacy/"
    }

    stages {
        stage('Clean & Compile') {
            steps {
                dir(PROJECT_DIR) {
                    sh 'mvn clean compile -DskipTests'
                }
            }
        }

        stage('Static Code Analysis') {
            parallel {
                stage('PMD') {
                    steps {
                        dir(PROJECT_DIR) {
                            sh 'mvn pmd:pmd'
                        }
                    }
                }
                stage('SpotBugs') {
                    steps {
                        dir(PROJECT_DIR) {
                            sh 'mvn spotbugs:spotbugs'
                        }
                    }
                }
            }
        }

        stage('Tests') {
            parallel {
                stage('Unit Tests') {
                    steps {
                        dir(PROJECT_DIR) {
                            sh "mvn test -Dmaven.test.failure.ignore=true"
                        }
                    }
                }
                stage('Mutation Tests') {
                    steps {
                        dir(PROJECT_DIR) {
                            sh 'mvn pitest:mutationCoverage'
                        }
                    }
                }
                stage('Integration Tests') {
                    steps {
                        dir(PROJECT_DIR) {
                            sh 'mvn failsafe:integration-test'
                            sh 'mvn surefire-report:failsafe-report-only -DreportsDirectory=target/failsafe-reports -DoutputDirectory=target/site'
                        }
                    }
                }
            }
        }

        stage('Generate Coverage Report') {
            steps {
                dir(PROJECT_DIR) {
                    sh 'mvn jacoco:report'
                }
            }
        }

        stage('Packaging') {
            steps {
                dir(PROJECT_DIR) {
                    sh 'mvn package -DskipTests'
                }
            }
        }

        stage('Prepare to Deploy') {
            steps {
                script {
                    sh "rm -rf deploy/*"
                    dir(PROJECT_DIR) {
                        sh "mkdir -p ../deploy"
                        sh "cp target/*.jar ../deploy"
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    def serverConfigName = ''
                    switch (env.GIT_BRANCH) {
                        case 'origin/dev':
                            serverConfigName = 'RAC_DEV'
                            break
                        case 'origin/main':
                            serverConfigName = 'RAC_PROD'
                            break
                        default:
                            serverConfigName = 'RAC_TEST'
                            break
                    }

                    sshPublisher(publishers: [
                        sshPublisherDesc(
                            configName: serverConfigName,
                            transfers: [
                                sshTransfer(
                                    sourceFiles: "",
                                    remoteDirectory: "",
                                    execCommand: "rm -rf /deploy/* || true"
                                ),
                                sshTransfer(
                                    sourceFiles: "deploy/*.jar",
                                    remoteDirectory: "",
                                    execCommand: """
                                        fuser -k 2224/tcp || true
                                        export \$(grep -v '^#' /cfg/myCfg.env | xargs)
                                        nohup /usr/local/openjdk-17/bin/java -jar \$(find /deploy -name "*.jar" -print -quit) --server.port=2224 --spring.config.location="/cfg/" > /deploy/app.log 2>&1 &
                                    """
                                )
                            ],
                            usePromotionTimestamp: false,
                            useWorkspaceInPromotion: false,
                        )
                    ])
                }
            }
        }
    }
    
    post {
        always {
            archiveArtifacts artifacts: "${PROJECT_DIR}/target/failsafe-reports/*", allowEmptyArchive: true
            archiveArtifacts artifacts: "${PROJECT_DIR}/target/surefire-reports/*", allowEmptyArchive: true
            archiveArtifacts artifacts: "${PROJECT_DIR}/target/pit-reports/**/*", allowEmptyArchive: true
            archiveArtifacts artifacts: "${PROJECT_DIR}/target/site/jacoco/**/*", allowEmptyArchive: true
            archiveArtifacts artifacts: "deploy/**/*", allowEmptyArchive: true

            publishHTML([
              reportName: 'Failsafe Report',
              reportDir: "${PROJECT_DIR}/target/site",
              reportFiles: 'failsafe-report.html',
              allowMissing: true,
              keepAll: true,
              alwaysLinkToLastBuild: true
            ])
            publishHTML([
              reportName: 'Surefire Report',
              reportDir: "${PROJECT_DIR}/target/site",
              reportFiles: 'surefire-report.html',
              allowMissing: true,
              keepAll: true,
              alwaysLinkToLastBuild: true
            ])
        }
    }
}
