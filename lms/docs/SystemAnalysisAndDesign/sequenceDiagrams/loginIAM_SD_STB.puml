@startuml
autoactivate on
autonumber

title IAM Authentication with Google and Facebook (External Callback)

actor "Anonymous" as Anonymous
participant ":System" as System
participant "AuthController" as Ctrl
participant "AuthenticationService" as Service
participant "IamAuthentication" as IamAuthInterface
participant "GoogleAuth / FacebookAuth" as ProviderImpl
participant "OAuthHelper" as OAuthHelper
actor "External System (Google / Facebook)" as ExternalSystem
participant "UserService" as UserService
participant "User" as User
participant "JWT Token" as JWT

activate Anonymous

== Step 1: redirectToProvider() ==

Anonymous -> System: Initiates login with Google/Facebook
System -> Ctrl: redirectToProvider()

Ctrl -> Service: getAuthorizationUrl()
Service -> IamAuthInterface: getAuthorizationUrl()

IamAuthInterface -> ProviderImpl: GoogleAuth / FacebookAuth getAuthorizationUrl()

' Expanded getAuthorizationUrl method in provider implementations
ProviderImpl -> OAuthHelper: getAuthorizationUrl(authorizationUrl, authorizationUri, clientId, redirectUri, emailScope + " " + profileScope)
OAuthHelper --> ProviderImpl: authorizationUrl

ProviderImpl --> Service: authorizationUrl
Service --> Ctrl: authorizationUrl
Ctrl --> System: authorizationUrl
System --> Anonymous: authorizationUrl

== Step 2: External Callback with Authorization Code ==

Anonymous -> ExternalSystem: Logs in via Google/Facebook
ExternalSystem -> Ctrl: handleProviderCallback(authorizationCode)

Ctrl -> Service: handleLoginCallback(authorizationCode)
Service -> IamAuthInterface: handleCallback(authorizationCode)

IamAuthInterface -> ProviderImpl: GoogleAuth / FacebookAuth handleCallback(authorizationCode)
ProviderImpl -> OAuthHelper: getTokenFromAuthorizationCode(clientId, clientSecret, authorizationCode, redirectUri, tokenUri)
OAuthHelper --> ProviderImpl: oauthToken

ProviderImpl -> Service: validateToken(oauthToken)
Service -> ProviderImpl: validateToken(oauthToken)
ProviderImpl -> OAuthHelper: getUserInfo(oauthToken, userInfoUri)
OAuthHelper --> ProviderImpl: userInfo (username, name)

ProviderImpl --> Service: userInfo (username, name)

== Step 3: Retrieve or Create User ==

Service -> UserService: findByUsername(username)
alt If user is found
    UserService --> Service: user
else If user is not found
    Service -> UserService: createIam(CreateIamUserRequest(username, name))
    UserService --> Service: iamUser
end

== Step 4: Generate JWT ==

Service -> JWT: generateJwt(iamUser)
JWT --> Service: jwtToken

Service --> Ctrl: jwtToken
Ctrl --> System: jwtToken
System --> Anonymous: jwtToken (Login successful)

@enduml


