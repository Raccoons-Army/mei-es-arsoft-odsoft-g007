pipeline {
    agent any

    triggers {
        githubPush(){
            branch('main')
        }
    }

    tools {
        maven 'Maven 3.9.9'
        jdk 'JDK 17'
    }

    environment {
        REPO_DIR = 'mei-es-arsoft-odsoft-g007'
        PROJECT_DIR = "${REPO_DIR}/lms"
        LOCAL_DEPLOY_DIR = "../../deploy"
        LOCAL_DEPLOY_DIR_CFG = "../../deploy/cfg"
        DEPLOY_DIR = "deploy"
        DEPLOY_DIR_CFG = "cfg/"
        ENV_FILE_NAME = 'myCfg.env'
        APP_PORT = 2224
    }

    stages {
        stage('okay i PULL up!') {
            steps {
                dir(REPO_DIR) {
                    sh 'git pull'
                }
            }
        }

        stage('Build') {
            steps {
                dir(PROJECT_DIR) {
                    // Clean and package without running tests
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Check if Artifact created') {
            steps {
                dir(PROJECT_DIR) {
                    // Verify the artifact creation
                    sh 'ls target/*.jar || echo "No artifact found"'
                }
            }
        }

        stage('Static Code Analysis') {
            steps {
                dir(PROJECT_DIR) {
                    sh 'mvn pmd:pmd'
                    sh 'mvn spotbugs:spotbugs'
                }
            }
        }
       
        stage('Run Unit Tests') {
            steps {
                dir(PROJECT_DIR) {
                    // Run tests while ignoring failures
                    sh "mvn test -Dmaven.test.failure.ignore=true"
                }
            }
        }

         stage('Generate Coverage Report') {
            steps {
                dir(PROJECT_DIR) {
                    sh 'mvn jacoco:report'
                }
            }
        }

        stage('Mutation Testing') {
            steps {
                dir(PROJECT_DIR) {
                    sh 'mvn pitest:mutationCoverage'
                }
            }
        }

        stage('Run Integration Tests') {
            steps {
                dir(PROJECT_DIR) {
                    sh 'mvn failsafe:integration-test'
                }
            }
        }

        stage('Prepare to Deploy') {
            steps {
                script {

                    // clear the deploy directory
                    sh "rm -rf ${DEPLOY_DIR}/*"
                    
                    dir(PROJECT_DIR) {
                        // ensure the deployment directory exists
                        sh "mkdir -p ${LOCAL_DEPLOY_DIR}"

                        // copy the .jar file to the deploy directory (root of the workspace)
                        sh "cp target/*.jar ${LOCAL_DEPLOY_DIR}"
                    }

                }
            }
        }

        stage('Prepare SSH') {
            steps {
                script {
                    // Ensure the known_hosts file exists
                    sh 'mkdir -p ~/.ssh'
                    // Add the host key to known_hosts
                    sh 'ssh-keyscan -p 11093 vsgate-ssh.dei.isep.ipp.pt >> ~/.ssh/known_hosts'
                }
            }
        }

        stage('Deploy to vsgate') {
            steps {
                script {
                    sshPublisher(publishers: [
                        sshPublisherDesc(
                            configName: 'VSGATE_SERVER',
                            transfers: [
                                 // Clear the remote deploy directory
                                sshTransfer(
                                    sourceFiles: "",
                                    remoteDirectory: "",
                                    execCommand: "rm -rf ${DEPLOY_DIR}/* || true"
                                ),
                                // transfer the .jar file to the deploy directory > kill the existing process > start the new process
                                sshTransfer(
                                    sourceFiles: "${DEPLOY_DIR}/*.jar",
                                    remoteDirectory: "",
                                    execCommand: """
                                        # Kill the existing application process
                                        fuser -k ${APP_PORT}/tcp || true
                                        
                                        # load the environment variables
                                        export \$(grep -v '^#' ${DEPLOY_DIR_CFG}${ENV_FILE_NAME} | xargs)

                                        # source the environment variables
                                        source ${DEPLOY_DIR_CFG}${ENV_FILE_NAME}

                                        # boot the new application
                                        screen -dmS myJavaApp java -jar ${DEPLOY_DIR}/*.jar --server.port=${APP_PORT} --spring.config.location=${DEPLOY_DIR_CFG} > app.log 2>&1
                                    """
                                )
                            ],
                            usePromotionTimestamp: false,
                            useWorkspaceInPromotion: false,
                        )
                    ])
                }
            }
        }
    }
    
    post {
        always {
            archiveArtifacts artifacts: "${PROJECT_DIR}/target/failsafe-reports/*", allowEmptyArchive: true
            archiveArtifacts artifacts: "${PROJECT_DIR}/target/surefire-reports/*", allowEmptyArchive: true
            archiveArtifacts artifacts: "${PROJECT_DIR}/target/pit-reports/**/*", allowEmptyArchive: true
            archiveArtifacts artifacts: "${PROJECT_DIR}/target/site/jacoco/**/*", allowEmptyArchive: true
            archiveArtifacts artifacts: "${DEPLOY_DIR}/**/*", allowEmptyArchive: true
        }
    }
}
