pipeline {
    agent any

    tools {
        maven 'Maven 3.9.9'
        jdk 'JDK 17'
    }

    environment {
        REPO_DIR = 'mei-es-arsoft-odsoft-g007'
        PROJECT_DIR = "${REPO_DIR}/lms"
        LOCAL_DEPLOY_DIR = "../../deploy"
        LOCAL_DEPLOY_DIR_CFG = "../../deploy/cfg"
        DEPLOY_DIR = "deploy"
        DEPLOY_DIR_CFG = "${DEPLOY_DIR}/cfg/"
        ENV_FILE_NAME = 'myCfg.env'
    }

    stages {
        stage('okay i PULL up!') {
            steps {
                dir(REPO_DIR) {
                    sh 'git pull'
                }
            }
        }

        stage('Build') {
            steps {
                dir(PROJECT_DIR) {
                    // Clean and package without running tests
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Check if Artifact created') {
            steps {
                dir(PROJECT_DIR) {
                    // Verify the artifact creation
                    sh 'ls target/*.jar || echo "No artifact found"'
                }
            }
        }

        stage('Static Code Analysis') {
            steps {
                dir(PROJECT_DIR) {
                    sh 'mvn pmd:pmd'
                    sh 'mvn spotbugs:spotbugs'
                }
            }
        }
       
        stage('Run Unit Tests') {
            steps {
                dir(PROJECT_DIR) {
                    // Run tests while ignoring failures
                    sh "mvn test -Dmaven.test.failure.ignore=true"
                }
            }
        }

         stage('Generate Coverage Report') {
            steps {
                dir(PROJECT_DIR) {
                    sh 'mvn jacoco:report'
                }
            }
        }

        stage('Mutation Testing') {
            steps {
                dir(PROJECT_DIR) {
                    sh 'mvn pitest:mutationCoverage'
                }
            }
        }

        stage('Run Integration Tests') {
            steps {
                dir(PROJECT_DIR) {
                    sh 'mvn failsafe:integration-test'
                }
            }
        }

        stage('Prepare to Deploy') {
            steps {
                script {

                    // clear the deploy directory
                    sh "rm -rf ${DEPLOY_DIR}/*"
                    
                    dir(PROJECT_DIR) {
                        // ensure the deployment and deployment/cfg directory exists
                        sh "mkdir -p ${LOCAL_DEPLOY_DIR}"
                        sh "mkdir -p ${LOCAL_DEPLOY_DIR_CFG}"

                        // copy the .jar file to the deploy directory (root of the workspace)
                        sh "cp target/*.jar ${LOCAL_DEPLOY_DIR}"

                        // copy all application.properties and .yml files to the deploy/cfg directory
                        sh "cp src/main/resources/application*.properties ${LOCAL_DEPLOY_DIR_CFG}"
                        sh "cp src/main/resources/application*.yml ${LOCAL_DEPLOY_DIR_CFG}"

                        // copy the library.properties file to the deploy/cfg directory
                        sh "cp src/main/resources/config/*.properties ${LOCAL_DEPLOY_DIR_CFG}"
                    }

                    // Copy the .env file from the Jenkins credentials
                    withCredentials([file(credentialsId: 'env-file', variable: 'ENV_FILE')]) {
                        sh "cp \"${ENV_FILE}\" \"${DEPLOY_DIR_CFG}${ENV_FILE_NAME}\""
                    }

                    // load environment variables from a file set in Jenkins credentials and run the application
                    // withCredentials([file(credentialsId: 'env-file', variable: 'ENV_FILE')]) {
                    //     sh "export \$(cat \$ENV_FILE | xargs) && java -jar ${DEPLOY_DIR}/*.jar --spring.config.location=${DEPLOY_DIR_CFG} &"
                    // }
                }
            }
        }

        stage('Prepare SSH') {
            steps {
                script {
                    // Ensure the known_hosts file exists
                    sh 'mkdir -p ~/.ssh'
                    // Add the host key to known_hosts
                    sh 'ssh-keyscan -p 11093 vsgate-ssh.dei.isep.ipp.pt >> ~/.ssh/known_hosts'
                }
            }
        }

        stage('Deploy to vsgate') {
            steps {
                script {
                    sshPublisher(publishers: [
                        sshPublisherDesc(
                            configName: 'VSGATE_SERVER',
                            transfers: [
                                // transfer the .jar file to the deploy directory
                                sshTransfer(
                                    sourceFiles: "${DEPLOY_DIR}/**/*",
                                    remoteDirectory: "",
                                    execCommand: "source ${DEPLOY_DIR_CFG}${ENV_FILE_NAME} && java -jar ${DEPLOY_DIR}/*.jar --server.port=2224 --spring.config.location=${DEPLOY_DIR_CFG}"
                                )
                            ],
                            usePromotionTimestamp: false,
                            useWorkspaceInPromotion: false,
                        )
                    ])
                }
            }
        }
    }
    
    post {
        always {
            archiveArtifacts artifacts: "${PROJECT_DIR}/target/failsafe-reports/*", allowEmptyArchive: true
            archiveArtifacts artifacts: "${PROJECT_DIR}/target/surefire-reports/*", allowEmptyArchive: true
            archiveArtifacts artifacts: "${PROJECT_DIR}/target/pit-reports/**/*", allowEmptyArchive: true
            archiveArtifacts artifacts: "${PROJECT_DIR}/target/site/jacoco/**/*", allowEmptyArchive: true
            archiveArtifacts artifacts: "${DEPLOY_DIR}/**/*", allowEmptyArchive: true
        }
    }
}
